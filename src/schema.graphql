type Query {
  user(id: Int!): User
  users: [User!]!
  raid(id: Int!): Raid
  raids: [Raid!]!
  isAuthenticate: Boolean!
  isAdmin: Boolean!
  checkWatchUserContact(id: Int!): CheckResponse
  checkWatchUserName(id: Int!): CheckResponse
  watchUserName(id: Int!): String!
  watchUserEmail(id: Int!): String!
  watchUserPhone(id: Int!): String!
}

type Mutation {
  login(email: String!, password: String!): AuthPayload
  logout: AuthPayload
  editUserName(id: Int!, name: String!): User,
  editUserEmail(id: Int!, email: String!): User,
  editUserPhone(id: Int!, phone: String!): User,
  editUserCity(id: Int!, city: String!): User,
  editUserBirthYear(id: Int!, birthYear: Int!): User,
  editUserSex(id: Int!, sex: Int!): User,
  hideName(id: Int!, hideName: Boolean!): User,
  prohibitAddInOtherTeams(id: Int!, prohibitAddInOtherTeams: Boolean!): User,
  allowSendOrgMessages(id: Int!, allowSendOrgMessages: Boolean!): User,
  deleteUser(id: Int!): User,
  requestNewPassword(email: String!): Boolean!,
  sendNewPassword(email: String!, password: String!): AuthPayload,
}

type CheckResponse {
  success: Boolean!
  message: String
  code: String
}

enum RaidState {
  Create
  Open
  Close
}

type AuthPayload {
  token: String
  user: User
}


type User {
  id: Int!
  name: String!
  email: String!
  phone: String!
  city: String
  birthYear: Int
  sex: Int
  hideName: Boolean
  prohibitAddInOtherTeams: Boolean
  allowSendOrgMessages: Boolean
  r6: Float
  noInvitation: Boolean
}


type Raid {
  id: Int!
  name: String!
}

